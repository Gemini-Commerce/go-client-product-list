/*
Collection Service

The Collection Service provides a comprehensive API for managing product collections and categories. It supports the creation, retrieval, updating, and deletion of product collections, as well as managing associations between collections and products. Key functionalities include: - **Collection Management**: Create, update, and delete collections of products, enabling businesses to organize products into meaningful groups for easier browsing and marketing. - **Retrieval Operations**: Retrieve collections using various identifiers such as ID, URL key, or code, and list all existing collections with optional search and filter capabilities. - **Association Management**: Establish and manage associations between collections and products, allowing products to belong to one or multiple collections. - **Bulk Operations**: Perform bulk updates on product collection associations, optimizing the management of large-scale collections. - **Count and Search**: Get counts of products in a collection and search collections using filters or product identifiers for efficient management. - **Non-Hierarchical Structure**: While the service supports flat collections and categories, it does not yet include hierarchical relationships between categories. Designed for flexibility and scalability, the Collection Service empowers businesses to organize and present their product offerings effectively while maintaining a streamlined management process.

API version: v1
Contact: info@gemini-commerce.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package productlist

import (
	"encoding/json"
	"fmt"
)

// OrderByDirection the model 'OrderByDirection'
type OrderByDirection string

// List of OrderByDirection
const (
	ORDERBYDIRECTION_DEFAULT OrderByDirection = "DEFAULT"
	ORDERBYDIRECTION_ASC     OrderByDirection = "ASC"
	ORDERBYDIRECTION_DESC    OrderByDirection = "DESC"
)

// All allowed values of OrderByDirection enum
var AllowedOrderByDirectionEnumValues = []OrderByDirection{
	"DEFAULT",
	"ASC",
	"DESC",
}

func (v *OrderByDirection) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OrderByDirection(value)
	for _, existing := range AllowedOrderByDirectionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OrderByDirection", value)
}

// NewOrderByDirectionFromValue returns a pointer to a valid OrderByDirection
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOrderByDirectionFromValue(v string) (*OrderByDirection, error) {
	ev := OrderByDirection(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OrderByDirection: valid values are %v", v, AllowedOrderByDirectionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OrderByDirection) IsValid() bool {
	for _, existing := range AllowedOrderByDirectionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OrderByDirection value
func (v OrderByDirection) Ptr() *OrderByDirection {
	return &v
}

type NullableOrderByDirection struct {
	value *OrderByDirection
	isSet bool
}

func (v NullableOrderByDirection) Get() *OrderByDirection {
	return v.value
}

func (v *NullableOrderByDirection) Set(val *OrderByDirection) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderByDirection) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderByDirection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderByDirection(val *OrderByDirection) *NullableOrderByDirection {
	return &NullableOrderByDirection{value: val, isSet: true}
}

func (v NullableOrderByDirection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderByDirection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
