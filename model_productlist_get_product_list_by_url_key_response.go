/*
Collection Service

The Collection Service provides a comprehensive API for managing product collections and categories. It supports the creation, retrieval, updating, and deletion of product collections, as well as managing associations between collections and products. Key functionalities include: - **Collection Management**: Create, update, and delete collections of products, enabling businesses to organize products into meaningful groups for easier browsing and marketing. - **Retrieval Operations**: Retrieve collections using various identifiers such as ID, URL key, or code, and list all existing collections with optional search and filter capabilities. - **Association Management**: Establish and manage associations between collections and products, allowing products to belong to one or multiple collections. - **Bulk Operations**: Perform bulk updates on product collection associations, optimizing the management of large-scale collections. - **Count and Search**: Get counts of products in a collection and search collections using filters or product identifiers for efficient management. - **Non-Hierarchical Structure**: While the service supports flat collections and categories, it does not yet include hierarchical relationships between categories. Designed for flexibility and scalability, the Collection Service empowers businesses to organize and present their product offerings effectively while maintaining a streamlined management process.

API version: v1
Contact: info@gemini-commerce.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package productlist

import (
	"encoding/json"
)

// checks if the ProductlistGetProductListByUrlKeyResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProductlistGetProductListByUrlKeyResponse{}

// ProductlistGetProductListByUrlKeyResponse Defines the structure for GetProductListByUrlKeyResponse.
type ProductlistGetProductListByUrlKeyResponse struct {
	List                 *ProductlistProductListEntity `json:"list,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ProductlistGetProductListByUrlKeyResponse ProductlistGetProductListByUrlKeyResponse

// NewProductlistGetProductListByUrlKeyResponse instantiates a new ProductlistGetProductListByUrlKeyResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProductlistGetProductListByUrlKeyResponse() *ProductlistGetProductListByUrlKeyResponse {
	this := ProductlistGetProductListByUrlKeyResponse{}
	return &this
}

// NewProductlistGetProductListByUrlKeyResponseWithDefaults instantiates a new ProductlistGetProductListByUrlKeyResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProductlistGetProductListByUrlKeyResponseWithDefaults() *ProductlistGetProductListByUrlKeyResponse {
	this := ProductlistGetProductListByUrlKeyResponse{}
	return &this
}

// GetList returns the List field value if set, zero value otherwise.
func (o *ProductlistGetProductListByUrlKeyResponse) GetList() ProductlistProductListEntity {
	if o == nil || IsNil(o.List) {
		var ret ProductlistProductListEntity
		return ret
	}
	return *o.List
}

// GetListOk returns a tuple with the List field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductlistGetProductListByUrlKeyResponse) GetListOk() (*ProductlistProductListEntity, bool) {
	if o == nil || IsNil(o.List) {
		return nil, false
	}
	return o.List, true
}

// HasList returns a boolean if a field has been set.
func (o *ProductlistGetProductListByUrlKeyResponse) IsSetList() bool {
	if o != nil && !IsNil(o.List) {
		return true
	}

	return false
}

// SetList gets a reference to the given ProductlistProductListEntity and assigns it to the List field.
func (o *ProductlistGetProductListByUrlKeyResponse) SetList(v ProductlistProductListEntity) {
	o.List = &v
}

func (o ProductlistGetProductListByUrlKeyResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProductlistGetProductListByUrlKeyResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.List) {
		toSerialize["list"] = o.List
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ProductlistGetProductListByUrlKeyResponse) UnmarshalJSON(data []byte) (err error) {
	varProductlistGetProductListByUrlKeyResponse := _ProductlistGetProductListByUrlKeyResponse{}

	err = json.Unmarshal(data, &varProductlistGetProductListByUrlKeyResponse)

	if err != nil {
		return err
	}

	*o = ProductlistGetProductListByUrlKeyResponse(varProductlistGetProductListByUrlKeyResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "list")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *ProductlistGetProductListByUrlKeyResponse) GetValue() interface{} {
	if o == nil || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}

// SetValue populates the value of well-known types
func (o *ProductlistGetProductListByUrlKeyResponse) SetValue(value interface{}) {
	if o == nil || IsNil(value) {
		return
	}
	if IsNil(o.AdditionalProperties) {
		o.AdditionalProperties = map[string]interface{}{}
	}
	o.AdditionalProperties["value"] = value
	return
}

type NullableProductlistGetProductListByUrlKeyResponse struct {
	value *ProductlistGetProductListByUrlKeyResponse
	isSet bool
}

func (v NullableProductlistGetProductListByUrlKeyResponse) Get() *ProductlistGetProductListByUrlKeyResponse {
	return v.value
}

func (v *NullableProductlistGetProductListByUrlKeyResponse) Set(val *ProductlistGetProductListByUrlKeyResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableProductlistGetProductListByUrlKeyResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableProductlistGetProductListByUrlKeyResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductlistGetProductListByUrlKeyResponse(val *ProductlistGetProductListByUrlKeyResponse) *NullableProductlistGetProductListByUrlKeyResponse {
	return &NullableProductlistGetProductListByUrlKeyResponse{value: val, isSet: true}
}

func (v NullableProductlistGetProductListByUrlKeyResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductlistGetProductListByUrlKeyResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
