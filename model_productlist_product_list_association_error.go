/*
Collection Service

The Collection Service provides a comprehensive API for managing product collections and categories. It supports the creation, retrieval, updating, and deletion of product collections, as well as managing associations between collections and products. Key functionalities include: - **Collection Management**: Create, update, and delete collections of products, enabling businesses to organize products into meaningful groups for easier browsing and marketing. - **Retrieval Operations**: Retrieve collections using various identifiers such as ID, URL key, or code, and list all existing collections with optional search and filter capabilities. - **Association Management**: Establish and manage associations between collections and products, allowing products to belong to one or multiple collections. - **Bulk Operations**: Perform bulk updates on product collection associations, optimizing the management of large-scale collections. - **Count and Search**: Get counts of products in a collection and search collections using filters or product identifiers for efficient management. - **Non-Hierarchical Structure**: While the service supports flat collections and categories, it does not yet include hierarchical relationships between categories. Designed for flexibility and scalability, the Collection Service empowers businesses to organize and present their product offerings effectively while maintaining a streamlined management process.

API version: v1
Contact: info@gemini-commerce.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package productlist

import (
	"encoding/json"
)

// checks if the ProductlistProductListAssociationError type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProductlistProductListAssociationError{}

// ProductlistProductListAssociationError Details an error encountered during operations on product-product association mappings.
type ProductlistProductListAssociationError struct {
	// Field code of type string.
	Code *string `json:"code,omitempty"`
	// Field message of type string.
	Message              *string `json:"message,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ProductlistProductListAssociationError ProductlistProductListAssociationError

// NewProductlistProductListAssociationError instantiates a new ProductlistProductListAssociationError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProductlistProductListAssociationError() *ProductlistProductListAssociationError {
	this := ProductlistProductListAssociationError{}
	return &this
}

// NewProductlistProductListAssociationErrorWithDefaults instantiates a new ProductlistProductListAssociationError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProductlistProductListAssociationErrorWithDefaults() *ProductlistProductListAssociationError {
	this := ProductlistProductListAssociationError{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *ProductlistProductListAssociationError) GetCode() string {
	if o == nil || IsNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductlistProductListAssociationError) GetCodeOk() (*string, bool) {
	if o == nil || IsNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *ProductlistProductListAssociationError) IsSetCode() bool {
	if o != nil && !IsNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *ProductlistProductListAssociationError) SetCode(v string) {
	o.Code = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *ProductlistProductListAssociationError) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductlistProductListAssociationError) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *ProductlistProductListAssociationError) IsSetMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *ProductlistProductListAssociationError) SetMessage(v string) {
	o.Message = &v
}

func (o ProductlistProductListAssociationError) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProductlistProductListAssociationError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ProductlistProductListAssociationError) UnmarshalJSON(data []byte) (err error) {
	varProductlistProductListAssociationError := _ProductlistProductListAssociationError{}

	err = json.Unmarshal(data, &varProductlistProductListAssociationError)

	if err != nil {
		return err
	}

	*o = ProductlistProductListAssociationError(varProductlistProductListAssociationError)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "code")
		delete(additionalProperties, "message")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *ProductlistProductListAssociationError) GetValue() interface{} {
	if o == nil || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}

// SetValue populates the value of well-known types
func (o *ProductlistProductListAssociationError) SetValue(value interface{}) {
	if o == nil || IsNil(value) {
		return
	}
	if IsNil(o.AdditionalProperties) {
		o.AdditionalProperties = map[string]interface{}{}
	}
	o.AdditionalProperties["value"] = value
	return
}

type NullableProductlistProductListAssociationError struct {
	value *ProductlistProductListAssociationError
	isSet bool
}

func (v NullableProductlistProductListAssociationError) Get() *ProductlistProductListAssociationError {
	return v.value
}

func (v *NullableProductlistProductListAssociationError) Set(val *ProductlistProductListAssociationError) {
	v.value = val
	v.isSet = true
}

func (v NullableProductlistProductListAssociationError) IsSet() bool {
	return v.isSet
}

func (v *NullableProductlistProductListAssociationError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductlistProductListAssociationError(val *ProductlistProductListAssociationError) *NullableProductlistProductListAssociationError {
	return &NullableProductlistProductListAssociationError{value: val, isSet: true}
}

func (v NullableProductlistProductListAssociationError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductlistProductListAssociationError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
