/*
Collection Service

The Collection Service provides a comprehensive API for managing product collections and categories. It supports the creation, retrieval, updating, and deletion of product collections, as well as managing associations between collections and products. Key functionalities include: - **Collection Management**: Create, update, and delete collections of products, enabling businesses to organize products into meaningful groups for easier browsing and marketing. - **Retrieval Operations**: Retrieve collections using various identifiers such as ID, URL key, or code, and list all existing collections with optional search and filter capabilities. - **Association Management**: Establish and manage associations between collections and products, allowing products to belong to one or multiple collections. - **Bulk Operations**: Perform bulk updates on product collection associations, optimizing the management of large-scale collections. - **Count and Search**: Get counts of products in a collection and search collections using filters or product identifiers for efficient management. - **Non-Hierarchical Structure**: While the service supports flat collections and categories, it does not yet include hierarchical relationships between categories. Designed for flexibility and scalability, the Collection Service empowers businesses to organize and present their product offerings effectively while maintaining a streamlined management process.

API version: v1
Contact: info@gemini-commerce.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package productlist

import (
	"encoding/json"
)

// checks if the ProductlistLocalizedText type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProductlistLocalizedText{}

// ProductlistLocalizedText Represents localized text for multilingual support, used in fields like URL keys.
type ProductlistLocalizedText struct {
	// Localized text values mapped by language codes.
	Value                *map[string]string `json:"value,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ProductlistLocalizedText ProductlistLocalizedText

// NewProductlistLocalizedText instantiates a new ProductlistLocalizedText object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProductlistLocalizedText() *ProductlistLocalizedText {
	this := ProductlistLocalizedText{}
	return &this
}

// NewProductlistLocalizedTextWithDefaults instantiates a new ProductlistLocalizedText object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProductlistLocalizedTextWithDefaults() *ProductlistLocalizedText {
	this := ProductlistLocalizedText{}
	return &this
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *ProductlistLocalizedText) GetValue() map[string]string {
	if o == nil || IsNil(o.Value) {
		var ret map[string]string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductlistLocalizedText) GetValueOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *ProductlistLocalizedText) IsSetValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given map[string]string and assigns it to the Value field.
func (o *ProductlistLocalizedText) SetValue(v map[string]string) {
	o.Value = &v
}

func (o ProductlistLocalizedText) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProductlistLocalizedText) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ProductlistLocalizedText) UnmarshalJSON(data []byte) (err error) {
	varProductlistLocalizedText := _ProductlistLocalizedText{}

	err = json.Unmarshal(data, &varProductlistLocalizedText)

	if err != nil {
		return err
	}

	*o = ProductlistLocalizedText(varProductlistLocalizedText)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "value")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *ProductlistLocalizedText) GetValue() interface{} {
	if o == nil || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}

// SetValue populates the value of well-known types
func (o *ProductlistLocalizedText) SetValue(value interface{}) {
	if o == nil || IsNil(value) {
		return
	}
	if IsNil(o.AdditionalProperties) {
		o.AdditionalProperties = map[string]interface{}{}
	}
	o.AdditionalProperties["value"] = value
	return
}

type NullableProductlistLocalizedText struct {
	value *ProductlistLocalizedText
	isSet bool
}

func (v NullableProductlistLocalizedText) Get() *ProductlistLocalizedText {
	return v.value
}

func (v *NullableProductlistLocalizedText) Set(val *ProductlistLocalizedText) {
	v.value = val
	v.isSet = true
}

func (v NullableProductlistLocalizedText) IsSet() bool {
	return v.isSet
}

func (v *NullableProductlistLocalizedText) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductlistLocalizedText(val *ProductlistLocalizedText) *NullableProductlistLocalizedText {
	return &NullableProductlistLocalizedText{value: val, isSet: true}
}

func (v NullableProductlistLocalizedText) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductlistLocalizedText) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
