/*
Collection Service

The Collection Service provides a comprehensive API for managing product collections and categories. It supports the creation, retrieval, updating, and deletion of product collections, as well as managing associations between collections and products. Key functionalities include: - **Collection Management**: Create, update, and delete collections of products, enabling businesses to organize products into meaningful groups for easier browsing and marketing. - **Retrieval Operations**: Retrieve collections using various identifiers such as ID, URL key, or code, and list all existing collections with optional search and filter capabilities. - **Association Management**: Establish and manage associations between collections and products, allowing products to belong to one or multiple collections. - **Bulk Operations**: Perform bulk updates on product collection associations, optimizing the management of large-scale collections. - **Count and Search**: Get counts of products in a collection and search collections using filters or product identifiers for efficient management. - **Non-Hierarchical Structure**: While the service supports flat collections and categories, it does not yet include hierarchical relationships between categories. Designed for flexibility and scalability, the Collection Service empowers businesses to organize and present their product offerings effectively while maintaining a streamlined management process.

API version: v1
Contact: info@gemini-commerce.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package productlist

import (
	"encoding/json"
)

// checks if the ProductlistGetProductListByUrlKeyRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProductlistGetProductListByUrlKeyRequest{}

// ProductlistGetProductListByUrlKeyRequest Defines the structure for GetProductListByUrlKeyRequest.
type ProductlistGetProductListByUrlKeyRequest struct {
	// Field tenant_id of type string.
	TenantId *string `json:"tenantId,omitempty"`
	// Field url_key of type string.
	UrlKey *string `json:"urlKey,omitempty"`
	// Field locale of type string.
	Locale               *string `json:"locale,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ProductlistGetProductListByUrlKeyRequest ProductlistGetProductListByUrlKeyRequest

// NewProductlistGetProductListByUrlKeyRequest instantiates a new ProductlistGetProductListByUrlKeyRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProductlistGetProductListByUrlKeyRequest() *ProductlistGetProductListByUrlKeyRequest {
	this := ProductlistGetProductListByUrlKeyRequest{}
	return &this
}

// NewProductlistGetProductListByUrlKeyRequestWithDefaults instantiates a new ProductlistGetProductListByUrlKeyRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProductlistGetProductListByUrlKeyRequestWithDefaults() *ProductlistGetProductListByUrlKeyRequest {
	this := ProductlistGetProductListByUrlKeyRequest{}
	return &this
}

// GetTenantId returns the TenantId field value if set, zero value otherwise.
func (o *ProductlistGetProductListByUrlKeyRequest) GetTenantId() string {
	if o == nil || IsNil(o.TenantId) {
		var ret string
		return ret
	}
	return *o.TenantId
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductlistGetProductListByUrlKeyRequest) GetTenantIdOk() (*string, bool) {
	if o == nil || IsNil(o.TenantId) {
		return nil, false
	}
	return o.TenantId, true
}

// HasTenantId returns a boolean if a field has been set.
func (o *ProductlistGetProductListByUrlKeyRequest) HasTenantId() bool {
	if o != nil && !IsNil(o.TenantId) {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given string and assigns it to the TenantId field.
func (o *ProductlistGetProductListByUrlKeyRequest) SetTenantId(v string) {
	o.TenantId = &v
}

// GetUrlKey returns the UrlKey field value if set, zero value otherwise.
func (o *ProductlistGetProductListByUrlKeyRequest) GetUrlKey() string {
	if o == nil || IsNil(o.UrlKey) {
		var ret string
		return ret
	}
	return *o.UrlKey
}

// GetUrlKeyOk returns a tuple with the UrlKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductlistGetProductListByUrlKeyRequest) GetUrlKeyOk() (*string, bool) {
	if o == nil || IsNil(o.UrlKey) {
		return nil, false
	}
	return o.UrlKey, true
}

// HasUrlKey returns a boolean if a field has been set.
func (o *ProductlistGetProductListByUrlKeyRequest) HasUrlKey() bool {
	if o != nil && !IsNil(o.UrlKey) {
		return true
	}

	return false
}

// SetUrlKey gets a reference to the given string and assigns it to the UrlKey field.
func (o *ProductlistGetProductListByUrlKeyRequest) SetUrlKey(v string) {
	o.UrlKey = &v
}

// GetLocale returns the Locale field value if set, zero value otherwise.
func (o *ProductlistGetProductListByUrlKeyRequest) GetLocale() string {
	if o == nil || IsNil(o.Locale) {
		var ret string
		return ret
	}
	return *o.Locale
}

// GetLocaleOk returns a tuple with the Locale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProductlistGetProductListByUrlKeyRequest) GetLocaleOk() (*string, bool) {
	if o == nil || IsNil(o.Locale) {
		return nil, false
	}
	return o.Locale, true
}

// HasLocale returns a boolean if a field has been set.
func (o *ProductlistGetProductListByUrlKeyRequest) HasLocale() bool {
	if o != nil && !IsNil(o.Locale) {
		return true
	}

	return false
}

// SetLocale gets a reference to the given string and assigns it to the Locale field.
func (o *ProductlistGetProductListByUrlKeyRequest) SetLocale(v string) {
	o.Locale = &v
}

func (o ProductlistGetProductListByUrlKeyRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProductlistGetProductListByUrlKeyRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TenantId) {
		toSerialize["tenantId"] = o.TenantId
	}
	if !IsNil(o.UrlKey) {
		toSerialize["urlKey"] = o.UrlKey
	}
	if !IsNil(o.Locale) {
		toSerialize["locale"] = o.Locale
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ProductlistGetProductListByUrlKeyRequest) UnmarshalJSON(data []byte) (err error) {
	varProductlistGetProductListByUrlKeyRequest := _ProductlistGetProductListByUrlKeyRequest{}

	err = json.Unmarshal(data, &varProductlistGetProductListByUrlKeyRequest)

	if err != nil {
		return err
	}

	*o = ProductlistGetProductListByUrlKeyRequest(varProductlistGetProductListByUrlKeyRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "tenantId")
		delete(additionalProperties, "urlKey")
		delete(additionalProperties, "locale")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

// GetValue returns the value of well-known types
func (o *ProductlistGetProductListByUrlKeyRequest) GetValue() interface{} {
	if o == nil || IsNil(o.AdditionalProperties) {
		return nil
	}
	return o.AdditionalProperties["value"]
}

// SetValue populates the value of well-known types
func (o *ProductlistGetProductListByUrlKeyRequest) SetValue(value interface{}) {
	if o == nil || IsNil(value) {
		return
	}
	if IsNil(o.AdditionalProperties) {
		o.AdditionalProperties = map[string]interface{}{}
	}
	o.AdditionalProperties["value"] = value
	return
}

type NullableProductlistGetProductListByUrlKeyRequest struct {
	value *ProductlistGetProductListByUrlKeyRequest
	isSet bool
}

func (v NullableProductlistGetProductListByUrlKeyRequest) Get() *ProductlistGetProductListByUrlKeyRequest {
	return v.value
}

func (v *NullableProductlistGetProductListByUrlKeyRequest) Set(val *ProductlistGetProductListByUrlKeyRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableProductlistGetProductListByUrlKeyRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableProductlistGetProductListByUrlKeyRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProductlistGetProductListByUrlKeyRequest(val *ProductlistGetProductListByUrlKeyRequest) *NullableProductlistGetProductListByUrlKeyRequest {
	return &NullableProductlistGetProductListByUrlKeyRequest{value: val, isSet: true}
}

func (v NullableProductlistGetProductListByUrlKeyRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProductlistGetProductListByUrlKeyRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
